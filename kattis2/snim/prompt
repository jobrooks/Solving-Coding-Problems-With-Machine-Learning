Arthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows: The starting position has a number of heaps, all containing some, not necessarily equal, number of beads. The players take turns chosing a heap and removing a positive number of beads from it. The first player not able to make a move, loses. Arthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move: Xor the number of beads in the heaps in the current position (i.e., if we have 2, 4 and 7 the xor-sum will be 1 since 2 mathbf{xor} 4 mathbf{xor} 7 = 1). If the xor-sum is 0, too bad, you will lose. Otherwise, move such that the xor-sum becomes 0. This is always possible. It is quite easy to convince oneself that this works. Consider these facts: The player that takes the last bead wins. After the winning player’s last move the xor-sum will be 0. The xor-sum will change after every move. Which means that if you make sure that the xor-sum always is 0 when you have made your move, your opponent will never be able to win, and, thus, you will win. Understandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, S-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set S, e.g. if we have S = { 2, 5}  each player is only allowed to remove 2 or 5 beads. Now it is not always possible to make the xor-sum 0 and, thus, the strategy above is useless. Or is it? Your job is to write a program that determines if a position of S-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position. Input The first line of input contains a number k (1 le k le 100) describing the size of S, followed by k numbers s_ i (1 le s_ i le 10, 000) describing S. The second line contains a number m (1 le m le 100) describing the number of positions to evaluate. The next m lines each contain a number l (1 le l le 100) describing the number of heaps and l numbers h_ i (0 le h_ i le 10, 000) describing the number of beads in the heaps. Output For each position: If the described position is a winning position print a ‘W’. If the described position is a losing position print an ‘L’. Sample Input 1 Sample Output 1 2 2 5 3 2 5 12 3 2 4 7 4 2 3 7 12 LWW Sample Input 2 Sample Output 2 5 1 2 3 4 5 3 2 5 12 3 2 4 7 4 2 3 7 12 WWL