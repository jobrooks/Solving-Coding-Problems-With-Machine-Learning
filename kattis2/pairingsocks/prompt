Picture by Villy Fink Isaksen, cc by-sa Simone’s mother often complains about how Simone never helps with chores at home. In return, Simone often points out that many of the chores her mother assigns her are NP-complete to perform optimally (like cleaning the house, seating her little brothers around the dinner table in a conflict-free way, splitting the brothers’ Halloween loot in a fair manner and so on). Being a computer scientist, her mother finds this a fair objection. Looking over her list of potential chores, she picked one she thinks should be easy to solve – pairing a number of different kinds of socks. In the beginning, there are 2n socks stacked in a pile. To pair the socks, Simone can repeatedly make one of three moves: Move the sock from the top of the original pile to the top of an auxiliary pile (which is originally empty). Move the sock from the top of the auxiliary pile to the top of the original pile. Pair the top socks from each pile together, if they are of the same type. Simone only has one auxiliary pile, for a total of two piles. There may be more than two socks of each type. In this case, Simone can pair them up however she wants. Your task is to help Simone to determine the least number of moves she needs to pair the socks, if it is possible at all. Input The first line of input contains the integer n (1 le n le 10^5) as described above. The next line contains 2n integers a_1, ldots , a_{2n} (1 le a_ i le 10^9 for each i), where a_ i denotes the type of sock number i. Initially, sock 1 is at the top of the pile and sock 2n is at the bottom. Output If Simone can pair all the socks, output the least number of moves she needs to do this. If it is impossible to do so, output “impossible” (without the quotes). Sample Input 1 Sample Output 1 2 1 2 2 1 4 Sample Input 2 Sample Output 2 1 3 7 impossible Sample Input 3 Sample Output 3 3 5 5 5 5 5 5 6