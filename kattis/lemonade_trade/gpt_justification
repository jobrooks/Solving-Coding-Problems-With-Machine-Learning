To solve this problem, we can use a graph approach. Each child represents a node in the graph, and the edges represent the exchange rate between the two types of lemonade. We want to find the path that maximizes the amount of blue lemonade we end up with. This is equivalent to finding the maximum flow in a graph, where the source node is our node, the sink node is a virtual node representing the blue lemonade, and the capacities of the edges are the exchange rates.

To apply the maximum flow algorithm, we need to convert the capacities of the edges to integer values. We can do this by multiplying them by a large enough constant and rounding down. Since the exchange rates are given with at most 7 digits after the decimal point, we can multiply them by $10^7$ and round down to the nearest integer.

To obtain the maximum flow, we can use the Ford-Fulkerson algorithm or any other maximum flow algorithm of our choice. Finally, we can output the value of the maximum flow, which represents the maximum amount of blue lemonade we can obtain.
The convert_rate function converts the exchange rate to an integer value as described above. The bfs function implements a breadth-first search to find an augmenting path in the residual graph. The max_flow function implements the Ford-Fulkerson algorithm using the bfs function to find augmenting paths. Finally, in the main loop, we build the graph by adding the nodes and edges as described above, and compute the maximum flow using the max_flow function. We cap the result at 10 liters as required and output it with 6 decimal places of precision using
